{
  "openapi" : "3.0.1",
  "info" : {
    "title" : "Blog Post endpoints",
    "description" : "\"Use these endpoints for interacting with Blog Posts, Blog Authors, and Blog Tags\"",
    "version" : "v3"
  },
  "servers" : [ {
    "url" : "https://api.hubapi.com/"
  } ],
  "paths" : {
    "/cms/v3/blogs/authors" : {
      "get" : {
        "summary" : "Get all Blog Authors",
        "description" : "Get the list of blog authors. Supports paging and filtering. This method would be useful for an integration that examined these models and used an external service to suggest edits.\n",
        "operationId" : "get-/cms/v3/blogs/authors_getPage",
        "parameters" : [ {
          "name" : "createdAt",
          "in" : "query",
          "description" : "Only return Blog Authors created at exactly the specified time.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "format" : "date-time"
          }
        }, {
          "name" : "createdAfter",
          "in" : "query",
          "description" : "Only return Blog Authors created after the specified time.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "format" : "date-time"
          }
        }, {
          "name" : "createdBefore",
          "in" : "query",
          "description" : "Only return Blog Authors created before the specified time.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "format" : "date-time"
          }
        }, {
          "name" : "updatedAt",
          "in" : "query",
          "description" : "Only return Blog Authors last updated at exactly the specified time.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "format" : "date-time"
          }
        }, {
          "name" : "updatedAfter",
          "in" : "query",
          "description" : "Only return Blog Authors last updated after the specified time.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "format" : "date-time"
          }
        }, {
          "name" : "updatedBefore",
          "in" : "query",
          "description" : "Only return Blog Authors last updated before the specified time.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "format" : "date-time"
          }
        }, {
          "name" : "sort",
          "in" : "query",
          "description" : "Specifies which fields to use for sorting results. Valid fields are `name`, `createdAt`, `updatedAt`, `createdBy`, `updatedBy`. `createdAt` will be used by default.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }, {
          "name" : "after",
          "in" : "query",
          "description" : "The cursor token value to get the next set of results. You can get this from the `paging.next.after` JSON property of a paged response containing more results.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "The maximum number of results to return. Default is 100.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          }
        }, {
          "name" : "archived",
          "in" : "query",
          "description" : "Specifies whether to return archived Blog Authors. Defaults to `false`.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CollectionResponseWithTotalBlogAuthorForwardPaging"
                }
              }
            }
          },
          "default" : {
            "$ref" : "#/components/responses/Error"
          }
        },
        "security" : [ {
          "oauth2" : [ "content" ]
        }, {
          "hapikey" : [ ]
        } ]
      },
      "post" : {
        "summary" : "Create a new Blog Author",
        "description" : "Create a new Blog Author.",
        "operationId" : "post-/cms/v3/blogs/authors_create",
        "requestBody" : {
          "description" : "The JSON representation of a new Blog Author.",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/BlogAuthor"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BlogAuthor"
                }
              }
            }
          },
          "default" : {
            "$ref" : "#/components/responses/Error"
          }
        },
        "security" : [ {
          "oauth2" : [ "content" ]
        }, {
          "hapikey" : [ ]
        } ]
      }
    },
    "/cms/v3/blogs/authors/batch/archive" : {
      "post" : {
        "summary" : "Archive a batch of Blog Authors",
        "description" : "Delete the Blog Author objects identified in the request body.\nNote: This is not the same as the in-app `archive` function.",
        "operationId" : "post-/cms/v3/blogs/authors/batch/archive_archiveBatch",
        "requestBody" : {
          "description" : "The JSON array of Blog Author ids.",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/BatchInputString"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "204" : {
            "description" : "No content",
            "content" : { }
          },
          "default" : {
            "$ref" : "#/components/responses/Error"
          }
        },
        "security" : [ {
          "oauth2" : [ "content" ]
        }, {
          "hapikey" : [ ]
        } ]
      }
    },
    "/cms/v3/blogs/authors/batch/create" : {
      "post" : {
        "summary" : "Create a batch of Blog Authors",
        "description" : "Create the Blog Author objects detailed in the request body.",
        "operationId" : "post-/cms/v3/blogs/authors/batch/create_createBatch",
        "requestBody" : {
          "description" : "The JSON array of new Blog Authors to create.",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/BatchInputBlogAuthor"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BatchResponseBlogAuthor"
                }
              }
            }
          },
          "207" : {
            "description" : "multiple statuses",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BatchResponseBlogAuthorWithErrors"
                }
              }
            }
          },
          "default" : {
            "$ref" : "#/components/responses/Error"
          }
        },
        "security" : [ {
          "oauth2" : [ "content" ]
        }, {
          "hapikey" : [ ]
        } ]
      }
    },
    "/cms/v3/blogs/authors/batch/read" : {
      "post" : {
        "summary" : "Retrieve a batch of Blog Authors",
        "description" : "Retrieve the Blog Author objects identified in the request body.",
        "operationId" : "post-/cms/v3/blogs/authors/batch/read_readBatch",
        "parameters" : [ {
          "name" : "archived",
          "in" : "query",
          "description" : "Specifies whether to return archived Blog Authors. Defaults to `false`.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean"
          }
        } ],
        "requestBody" : {
          "description" : "The JSON array of Blog Author ids.",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/BatchInputString"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BatchResponseBlogAuthor"
                }
              }
            }
          },
          "207" : {
            "description" : "multiple statuses",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BatchResponseBlogAuthorWithErrors"
                }
              }
            }
          },
          "default" : {
            "$ref" : "#/components/responses/Error"
          }
        },
        "security" : [ {
          "oauth2" : [ "content" ]
        }, {
          "hapikey" : [ ]
        } ]
      }
    },
    "/cms/v3/blogs/authors/batch/update" : {
      "post" : {
        "summary" : "Update a batch of Blog Authors",
        "description" : "Update the Blog Author objects identified in the request body.",
        "operationId" : "post-/cms/v3/blogs/authors/batch/update_updateBatch",
        "parameters" : [ {
          "name" : "archived",
          "in" : "query",
          "description" : "Specifies whether to update archived Blog Authors. Defaults to `false`.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean"
          }
        } ],
        "requestBody" : {
          "description" : "A JSON array of the JSON representations of the updated Blog Authors.",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/BatchInputJsonNode"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BatchResponseBlogAuthor"
                }
              }
            }
          },
          "207" : {
            "description" : "multiple statuses",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BatchResponseBlogAuthorWithErrors"
                }
              }
            }
          },
          "default" : {
            "$ref" : "#/components/responses/Error"
          }
        },
        "security" : [ {
          "oauth2" : [ "content" ]
        }, {
          "hapikey" : [ ]
        } ]
      }
    },
    "/cms/v3/blogs/authors/{objectId}" : {
      "get" : {
        "summary" : "Retrieve a Blog Author",
        "description" : "Retrieve the Blog Author object identified by the id in the path.",
        "operationId" : "get-/cms/v3/blogs/authors/{objectId}_getById",
        "parameters" : [ {
          "name" : "objectId",
          "in" : "path",
          "description" : "The Blog Author id.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "archived",
          "in" : "query",
          "description" : "Specifies whether to return archived Blog Authors. Defaults to `false`.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BlogAuthor"
                }
              }
            }
          },
          "default" : {
            "$ref" : "#/components/responses/Error"
          }
        },
        "security" : [ {
          "oauth2" : [ "content" ]
        }, {
          "hapikey" : [ ]
        } ]
      },
      "delete" : {
        "summary" : "Delete a Blog Author",
        "description" : "Delete the Blog Author object identified by the id in the path.",
        "operationId" : "delete-/cms/v3/blogs/authors/{objectId}_archive",
        "parameters" : [ {
          "name" : "objectId",
          "in" : "path",
          "description" : "The Blog Author id.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "archived",
          "in" : "query",
          "description" : "Whether to return only results that have been archived.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "No content",
            "content" : { }
          },
          "default" : {
            "$ref" : "#/components/responses/Error"
          }
        },
        "security" : [ {
          "oauth2" : [ "content" ]
        }, {
          "hapikey" : [ ]
        } ]
      },
      "patch" : {
        "summary" : "Update a Blog Author",
        "description" : "Sparse updates a single Blog Author object identified by the id in the path.\nAll the column values need not be specified. Only the that need to be modified can be specified.\n",
        "operationId" : "patch-/cms/v3/blogs/authors/{objectId}_update",
        "parameters" : [ {
          "name" : "objectId",
          "in" : "path",
          "description" : "The Blog Author id.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "archived",
          "in" : "query",
          "description" : "Specifies whether to update archived Blog Authors. Defaults to `false`.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean"
          }
        } ],
        "requestBody" : {
          "description" : "The JSON representation of the updated Blog Author.",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/BlogAuthor"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BlogAuthor"
                }
              }
            }
          },
          "default" : {
            "$ref" : "#/components/responses/Error"
          }
        },
        "security" : [ {
          "oauth2" : [ "content" ]
        }, {
          "hapikey" : [ ]
        } ]
      }
    }
  },
  "components" : {
    "schemas" : {
      "BatchInputBlogAuthor" : {
        "required" : [ "inputs" ],
        "type" : "object",
        "properties" : {
          "inputs" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/BlogAuthor"
            }
          }
        }
      },
      "BatchInputJsonNode" : {
        "required" : [ "inputs" ],
        "type" : "object",
        "properties" : {
          "inputs" : {
            "type" : "array",
            "items" : {
              "type" : "object",
              "properties" : { }
            }
          }
        }
      },
      "BatchInputString" : {
        "required" : [ "inputs" ],
        "type" : "object",
        "properties" : {
          "inputs" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }
      },
      "BatchResponseBlogAuthor" : {
        "type" : "object"
      },
      "BatchResponseBlogAuthorWithErrors" : {
        "required" : [ "completedAt", "results", "startedAt", "status" ],
        "type" : "object",
        "properties" : {
          "status" : {
            "type" : "string",
            "enum" : [ "PENDING", "PROCESSING", "CANCELED", "COMPLETE" ]
          },
          "results" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/BlogAuthor"
            }
          },
          "numErrors" : {
            "type" : "integer",
            "format" : "int32"
          },
          "errors" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/StandardError"
            }
          },
          "requestedAt" : {
            "type" : "string",
            "format" : "date-time"
          },
          "startedAt" : {
            "type" : "string",
            "format" : "date-time"
          },
          "completedAt" : {
            "type" : "string",
            "format" : "date-time"
          },
          "links" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            }
          }
        }
      },
      "BlogAuthor" : {
        "required" : [ "avatar", "bio", "createdAt", "deletedAt", "displayName", "email", "facebook", "id", "linkedin", "twitter", "updatedAt", "website" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "The unique ID of the Blog Author."
          },
          "email" : {
            "type" : "string",
            "description" : "Email address of the Blog Author."
          },
          "bio" : {
            "type" : "string",
            "description" : "A short biography of the blog author."
          },
          "website" : {
            "type" : "string",
            "description" : "URL to the website of the Blog Author."
          },
          "twitter" : {
            "type" : "string",
            "description" : "URL or username of the Twitter account associated with the Blog Author. This will be normalized into the Twitter url for said user."
          },
          "facebook" : {
            "type" : "string",
            "description" : "URL to the Blog Author's Facebook page."
          },
          "linkedin" : {
            "type" : "string",
            "description" : "URL to the blog author's LinkedIn page."
          },
          "avatar" : {
            "type" : "string",
            "description" : "URL to the blog author's avatar, if supplying a custom one."
          },
          "displayName" : {
            "type" : "string",
            "description" : "The full name of the Blog Author to be displayed."
          },
          "deletedAt" : {
            "type" : "string",
            "description" : "The timestamp (ISO8601 format) when this Blog Author was deleted.",
            "format" : "date-time"
          },
          "createdAt" : {
            "type" : "string",
            "description" : "The timestamp (ISO8601 format) when this Blog Author was created.",
            "format" : "date-time"
          },
          "updatedAt" : {
            "type" : "string",
            "description" : "The timestamp (ISO8601 format) when this Blog Author was last updated.",
            "format" : "date-time"
          }
        },
        "description" : "Model definition for a Blog Author."
      },
      "CollectionResponseWithTotalBlogAuthorForwardPaging" : {
        "required" : [ "results", "total" ],
        "type" : "object",
        "properties" : {
          "total" : {
            "type" : "integer",
            "format" : "int32"
          },
          "results" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/BlogAuthor"
            }
          },
          "paging" : {
            "$ref" : "#/components/schemas/ForwardPaging"
          }
        }
      },
      "Error" : {
        "required" : [ "category", "correlationId", "message" ],
        "type" : "object",
        "properties" : {
          "message" : {
            "type" : "string",
            "description" : "A human readable message describing the error along with remediation steps where appropriate",
            "example" : "An error occurred"
          },
          "correlationId" : {
            "type" : "string",
            "description" : "A unique identifier for the request. Include this value with any error reports or support tickets",
            "format" : "uuid",
            "example" : "aeb5f871-7f07-4993-9211-075dc63e7cbf"
          },
          "category" : {
            "type" : "string",
            "description" : "The error category"
          },
          "subCategory" : {
            "type" : "string",
            "description" : "A specific category that contains more specific detail about the error"
          },
          "errors" : {
            "type" : "array",
            "description" : "further information about the error",
            "items" : {
              "$ref" : "#/components/schemas/ErrorDetail"
            }
          },
          "context" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "array",
              "items" : {
                "type" : "string"
              }
            },
            "description" : "Context about the error condition",
            "example" : {
              "invalidPropertyName" : [ "propertyValue" ],
              "missingScopes" : [ "scope1", "scope2" ]
            }
          },
          "links" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "A map of link names to associated URIs containing documentation about the error or recommended remediation steps"
          }
        },
        "example" : {
          "message" : "Invalid input (details will vary based on the error)",
          "correlationId" : "aeb5f871-7f07-4993-9211-075dc63e7cbf",
          "category" : "VALIDATION_ERROR",
          "links" : {
            "knowledge-base" : "https://www.hubspot.com/products/service/knowledge-base"
          }
        }
      },
      "ErrorCategory" : {
        "type" : "object"
      },
      "ErrorDetail" : {
        "required" : [ "message" ],
        "type" : "object",
        "properties" : {
          "message" : {
            "type" : "string",
            "description" : "A human readable message describing the error along with remediation steps where appropriate"
          },
          "in" : {
            "type" : "string",
            "description" : "The name of the field or parameter in which the error was found."
          },
          "code" : {
            "type" : "string",
            "description" : "The status code associated with the error detail"
          },
          "subCategory" : {
            "type" : "string",
            "description" : "A specific category that contains more specific detail about the error"
          },
          "context" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "array",
              "items" : {
                "type" : "string"
              }
            },
            "description" : "Context about the error condition",
            "example" : {
              "missingScopes" : [ "scope1", "scope2" ]
            }
          }
        }
      },
      "ForwardPaging" : {
        "type" : "object",
        "properties" : {
          "next" : {
            "$ref" : "#/components/schemas/NextPage"
          }
        }
      },
      "NextPage" : {
        "required" : [ "after" ],
        "type" : "object",
        "properties" : {
          "after" : {
            "type" : "string"
          },
          "link" : {
            "type" : "string"
          }
        }
      },
      "StandardError" : {
        "required" : [ "category", "context", "errors", "links", "message", "status" ],
        "type" : "object",
        "properties" : {
          "status" : {
            "type" : "string"
          },
          "id" : {
            "type" : "string"
          },
          "category" : {
            "$ref" : "#/components/schemas/ErrorCategory"
          },
          "subCategory" : {
            "type" : "object",
            "properties" : { }
          },
          "message" : {
            "type" : "string"
          },
          "errors" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ErrorDetail"
            }
          },
          "context" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "array",
              "items" : {
                "type" : "string"
              }
            }
          },
          "links" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            }
          }
        }
      }
    },
    "responses" : {
      "Error" : {
        "description" : "An error occurred.",
        "content" : {
          "*/*" : {
            "schema" : {
              "$ref" : "#/components/schemas/Error"
            }
          }
        }
      }
    },
    "securitySchemes" : {
      "hapikey" : {
        "type" : "apiKey",
        "name" : "hapikey",
        "in" : "query"
      },
      "oauth2" : {
        "type" : "oauth2",
        "flows" : {
          "authorizationCode" : {
            "authorizationUrl" : "https://app.hubspot.com/oauth/authorize",
            "tokenUrl" : "https://api.hubapi.com/oauth/v1/token",
            "scopes" : {
              "content" : "Read from and write to my Content"
            }
          }
        }
      }
    }
  }
}